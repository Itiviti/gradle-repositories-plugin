apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'

group = 'com.ullink.gradle'
version = '1.1'

def customizePom(pom) {
    pom.project {
        name project.name
        description 'gradle-repositories-plugin is a Gradle plugin that provide helpers to make various download sites available as Gradle repositories'
        url 'http://github.com/gluck/gradle-repositories-plugin'
     
        scm {
            url 'scm:git@github.com:gluck/gradle-repositories-plugin.git'
            connection 'scm:git@github.com:gluck/gradle-repositories-plugin.git'
            developerConnection 'scm:git@github.com:gluck/gradle-repositories-plugin.git'
        }
    
        licenses {
            license {
                name 'Creative Commons — CC0 1.0 Universal'
                url 'http://creativecommons.org/publicdomain/zero/1.0/'
                distribution 'repo'
            }
        }
    
        developers {
            developer {
                id 'fvaldy'
                name 'Francois Valdy'
            }
        }
    }
}

def setupUploadArchives(sonatypeRepositoryUrl) {
    signing {
        sign configurations.archives
    }
    
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                repository(url: sonatypeRepositoryUrl) {
                  authentication(userName: sonatypeUsername, password: sonatypePassword)
                }
                customizePom pom
            }
        }
    }
}

if (hasProperty("release")) {
    setupUploadArchives("https://oss.sonatype.org/service/local/staging/deploy/maven2/")
} else {
    version += "-SNAPSHOT"
    if (hasProperty("snapshot")) {
        setupUploadArchives("https://oss.sonatype.org/content/repositories/snapshots/")
    }
}

customizePom install.repositories.mavenInstaller.pom

dependencies {
    compile gradleApi()
    groovy localGroovy()
    testCompile 'junit:junit:4.8.2'
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    classifier = 'javadoc'
    from 'build/docs/groovydoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar
    archives groovydocJar
    archives sourcesJar
}

repositories {
    mavenLocal()
    mavenCentral()
}

test {
    systemProperties = System.properties
}
